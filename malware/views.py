from django.shortcuts import render, get_object_or_404
from django.http import HttpResponse
from django.template.context_processors import csrf
from django.template import loader
import django_tables2 as tables
from django_tables2 import RequestConfig

from .models import Malware
from hosts.models import Host
from hosts.models import Subnet

class MalwareTable(tables.Table):
    alert_id = tables.Column(verbose_name='Alert ID',
                              attrs={'th' : {'class' : 'td-content'},
                                     'td' : {'class' : 'td-content'}})

    alert_type = tables.Column(verbose_name='Alert Type',
                                attrs={'th' : {'class' : 'td-content'},
                                       'td' : {'class' : 'td-content'}})

    file_name = tables.Column(verbose_name='File Name',
                                attrs={'th' : {'class' : 'td-content'},
                                       'td' : {'class' : 'td-content'}})

    computer = tables.Column(verbose_name='Computer',
                                attrs={'th' : {'class' : 'td-content'},
                                       'td' : {'class' : 'td-content'}})

    contact_group = tables.Column(verbose_name='Contact Group',
                                attrs={'th' : {'class' : 'td-content'},
                                       'td' : {'class' : 'td-content'}})

    virus = tables.Column(verbose_name='Virus',
                                attrs={'th' : {'class' : 'td-content'},
                                       'td' : {'class' : 'td-content'}})

    actual_action = tables.Column(verbose_name='Actual Action',
                                attrs={'th' : {'class' : 'td-content'},
                                       'td' : {'class' : 'td-content'}})

    comment = tables.Column(verbose_name='Comment',
                                attrs={'th' : {'class' : 'td-content'},
                                       'td' : {'class' : 'td-content'}})

    numeric_ip = tables.Column(verbose_name='IPv4 Address',
                                        attrs={'th' : {'class' : 'td-content'},
                                               'td' : {'class' : 'td-content'}})

    """
    numeric_ip = tables.TemplateColumn('<a href="/hosts/{{record.subnet_id}}/host/{{record.host_id}}">{{record.ipv4_address}}</a>',
                                        verbose_name='IPv4 Address',
                                        attrs={'th' : {'class' : 'td-content'},
                                               'td' : {'class' : 'td-content'}})
    """

    class Meta:
        td_attrs = {
            'class': 'td-content'
        }



def index(request):
    '''Renders page containing all malware in the database.'''
    # Retrieve all malware in db.
    malware_list = Malware.objects.all()

    # Set up table to display Malware.
    malware_table = MalwareTable(list(malware_list))
    RequestConfig(request, paginate={'per_page':100}).configure(malware_table)

    # Pass context to rendered page.
    context = {'malware_list' : malware_list,
               'malware_table' : malware_table}

    return render(request, 'malware/malware.html', context)


def search(request):
    '''Renders page containing queried malware.'''
    context = {}

    if request.method == "POST":

        form = request.POST
        context.update(csrf(request))

        context['request'] = request

        malware_keywords = request.POST['malware_keywords']

        malware_list = Malware.objects.all()

        # Check if multiple ports entered (ex 80, 443)
        if ',' in malware_keywords:
            words = malware_keywords.split(',')
            # Filter each specified keyword, one at a time.
            for w in words:
                w = w.strip()
                malware_list_temp = malware_list.filter(alert_id__icontains=w)
                malware_list_temp = malware_list_temp.union(
                                    malware_list.filter(alert_type__icontains=w))
                malware_list_temp = malware_list_temp.union(
                                    malware_list.filter(file_name__icontains=w))
                malware_list_temp = malware_list_temp.union(
                                    malware_list.filter(computer__icontains=w))
                malware_list_temp = malware_list_temp.union(
                                    malware_list.filter(numeric_ip__icontains=w))
                malware_list_temp = malware_list_temp.union(
                                    malware_list.filter(contact_group__icontains=w))
                malware_list_temp = malware_list_temp.union(
                                    malware_list.filter(virus__icontains=w))
                malware_list_temp = malware_list_temp.union(
                                    malware_list.filter(actual_action__icontains=w))
                malware_list_temp = malware_list_temp.union(
                                    malware_list.filter(comment__icontains=w))
                malware_list = malware_list.union(malware_list_temp)
        elif malware_keywords.strip():
            # Single keyword entered, so single filter needed:
            malware_list_temp = malware_list.filter(alert_id__icontains=w)
            malware_list_temp = malware_list_temp.union(
                                malware_list.filter(alert_type__icontains=w))
            malware_list_temp = malware_list_temp.union(
                                malware_list.filter(file_name__icontains=w))
            malware_list_temp = malware_list_temp.union(
                                malware_list.filter(computer__icontains=w))
            malware_list_temp = malware_list_temp.union(
                                malware_list.filter(numeric_ip__icontains=w))
            malware_list_temp = malware_list_temp.union(
                                malware_list.filter(contact_group__icontains=w))
            malware_list_temp = malware_list_temp.union(
                                malware_list.filter(virus__icontains=w))
            malware_list_temp = malware_list_temp.union(
                                malware_list.filter(actual_action__icontains=w))
            malware_list_temp = malware_list_temp.union(
                                malware_list.filter(comment__icontains=w))
            malware_list = malware_list_temp

        # Set up table to display Malware.
        malware_table = MalwareTable(list(malware_list))
        RequestConfig(request, paginate={'per_page':100}).configure(malware_table)

        # Pass context to rendered page.
        context = {'malware_list' : malware_list,
                   'malware_table' : malware_table}

        # We're not exporting, so render the page with a table.
        return render_to_response('malware/malware.html', context)

    context.update(csrf(request))
    return render_to_response('malware/malware.html', context)
